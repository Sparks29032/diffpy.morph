\input texinfo  @c -*-texinfo-*-

@documentencoding UTF-8

@ifnottex
@macro smallskip{}
@vskip 6pt
@end macro

@macro medskip{}
@vskip 12pt
@end macro

@macro bigskip{}
@vskip 24pt
@end macro
@end ifnottex

@macro EquationMark{}
@html
<!-- EquationMark -->
@end html
@end macro

@macro ScreenShot{f,ext}
@center @image{\f\, 5.5in,,\ext\}
@end macro

@macro ReleaseDate{}
June 2024
@end macro

@exampleindent 2

@c start of header
@setfilename pdfmorph
@settitle PDFmorph, release 1.0.0, @ReleaseDate{}
@c end of header

@c Part 1: copying
@copying
Copyright 2009-2024, Board of Trustees of Columbia University in the city of New York.
@end copying

@c Part 2: title
@titlepage

@title PDFmorph user guide
@subtitle 1.0.0 release
@subtitle @ReleaseDate{}
@author C. L. Farrow, C. J. Wright, P. Juhás, C.-H. Liu, T. Davis,
@author S. M. Román, A. Yang, and S. J. L. Billinge

@page
@vskip 0pt plus 1filll
@c @insertcopying

@ifhtml
@node acknowledgments
@end ifhtml
@heading Acknowledgments
@cindex  acknowledgments
@include acknowledgements.texinfo


@page
@vskip 0pt plus 1filll
@majorheading Preface
@heading Redistribution
@include redistribution.texinfo


@heading Disclaimer
@include disclaimer.texinfo

@end titlepage


@c Part 3: content
@contents


@c Make menu if html
@ifhtml

@node Top
@top


@menu
* Introduction::
* Installation::
* Tutorials::
* Available morphs::
* PDFmorph options::
* Index::
@end menu

@end ifhtml

@page
@vskip 0pt plus 1filll
@node    Introduction, Installation, Top, Top
@chapter Introduction
@cindex  introduction

@code{PDFmorph} is a Python package that increases the insight researchers can
obtain by comparing measured atomic pair distribution functions (PDFs) in a
model-independent way. It was originally designed to help a researcher
answer a question: "Has my material undergone a phase transition between
these two measurements?"

A common approach to compare two PDFs is to plot the difference curve below
the two PDFs. However, a significant signal can be seen in the difference curve
due to benign effects such as thermal expansion (peak shifts), increased thermal
motion (peak broadening), or a change in scale due to differences in the incident
flux when computing the PDFs for example. Other commonly-used dissimilarity metrics
such as the weighted Rietveld reliability factor @math{R_W} are also inflated by
these effects. @code{PDFmorph} does its best to correct for these benign effects
prior to computing the @math{R_W} and plotting the difference curve.

To use @code{PDFmorph}, supply one PDF as the "target" (suggested to the one collected
under higher temperature) and a second PDF to be morphed. The user can choose from
a list of morphs to apply, which includes "stretching" (scaling the @math{r}-axis,
the abscissa, to simulate isotropic expansion/compression), "smearing" (peak broadening
by convlution with a Gaussian), and "scaling" (scaling the ordinate axis). By default,
@code{PDFmorph} will refine the intensity of the morphs to best match the morphed to
the target PDF.

@code{PDFmorph} includes other morphs including those that factor in nanoparticle
shape effects. For a full list of available morphs, see @ref{Available morphs}.
For a quick tutorial on using @code{PDFmorph}, see @ref{Quick start tutorial}.
For a full list of command-line options, see @ref{PDFmorph options}.

Finally, we note that though @code{PDFmorph} could be used on other spectra,
it has not been extensively tested beyond the PDF.

@page
@vskip 0pt plus 1filll
@node    Installation, Tutorials, Introduction, Top
@chapter Installation
@cindex  installation

@menu
* Availability::
* Requirements::
* Installation instructions::
@end menu

@node    Availability, Requirements, Installation, Installation
@section Availability
@cindex  availability

@code{PDFmorph} is open source and distributed under the BSD license.
It runs on Windows, Mac OS, Linux, and all major Unix systems.
The source code is freely available at @url{https://github.com/diffpy/diffpy.pdfmorph}.

If you come accross any bugs in the application, please open an
@url{https://github.com/diffpy/diffpy.pdfmorph/issues, issue} or email
diffpy-dev@@googlegroups.com.

@node    Requirements, Installation instructions, Availability, Installation
@section Requirements
@cindex  requirements

@code{PDFmorph} is currently run from the command line, so it is recommended that users
first familiarize themselves with their operating system's command line interface.

@code{PDFmorph} currently requires Python 3.10 or higher to run. It also makes use of
the following third party libraries:
@itemize @bullet
@item @url{https://numpy.org/, NumPy} - Python's fast scientific computing library
@item @url{https://matplotlib.org/, Matplotlib} - Python plotting library
@item @url{https://scipy.org/, SciPy} - Python's technical computing library
@item @url{https://www.diffpy.org/diffpy.utils/, diffpy.utils}
- @url{https://www.diffpy.org/, DiffPy} general utility functions
@end itemize
These dependencies will be installed automatically if you use the conda installation
procedure described in the following section (@ref{Installation instructions}).

@node    Installation instructions, , Requirements, Installation
@section Installation instructions
@cindex  installation instrunctions

We recommend installing the package and its dependencies using conda.
Miniconda, a minimal installer for conda, can be downloaded
@url{https://docs.anaconda.com/free/miniconda/, here}.
Once Miniconda is installed, run @code{conda} on the command line
 to test that it has been installed properly.

To create and activate a conda environment to use @code{PDFmorph}, run the following command.
@example
conda create -n pdfmorph_env python=3 --yes
conda activate pdfmorph_env
@end example

A conda environment must be active to use the packages within.
In future sessions, make sure to run @code{conda activate pdfmorph_env} to activate the
environment before interacting with the @code{PDFmorph} program.

Once active, you can install @code{PDFmorph} into your environment from the
@url{https://conda-forge.org/, conda-forge} channel of Anaconda packages by running
@example
conda config --add channels conda-forge
conda install diffpy.pdfmorph
@end example
This installation only needs to be done once. The next time you activate the environment,
these packages will already be installed. To see a list of all installed packages within
an environment, run
@example
conda list
@end example

When you are finished with the session, exit the environment by running
@example
conda deactivate pdfmorph_env
@end example

If you do not wish to use conda to install, @code{PDFmorph} is also available on the
@url{https://pypi.org/, Python Package Index} or can be installed from source
at @url{https://github.com/diffpy/diffpy.pdfmorph}. Note that these installation
methods will require you to first install the dependencies listed in the previous section
(@ref{Requirements}).

@page
@vskip 0pt plus 1filll
@node    Tutorials, Available morphs, Installation, Top
@chapter Tutorials
@cindex  tutorials

@menu
* Quick start tutorial::
* Extra tutorials::
@end menu

This section includes a quick start tutorial to acquaint users with the core
features of @code{PDFmorph}. Also included are a few extra tutorials
covering some more specific @code{PDFmorph} functionalities.

Before you start this tutorial, make sure you have installed all necessary software
and dependencies (@ref{Installation instructions}). If you are looking for a full
summary of @code{PDFmorph} command-line options, see @ref{PDFmorph options} or
run @code{pdfmorph --help} in a @code{PDFmorph}-equipped @code{conda} environment.

@node    Quick start tutorial, Extra tutorials, Tutorials, Tutorials
@section Quick start tutorial
@cindex  quick start tutorial

In this tutorial, we will demonstrate how to use @code{PDFmorph} to compare two PDFs
measured from the same material at different temperatures. The morphs showcased include
"stretch", "scale", and "smear". Throughout this tutorial, entries surrounded by angle
brackets @code{<>} represent placeholder names. The user is free to use their own names
in stead of those provided.

@enumerate
@item Open your terminal (Linux and MacOS) or Command Prompt (Windows).
@item If not already active, activate your @code{conda} environment with @code{PDFmorph} installed using
@example
conda activate <PDFmorph_env>
@end example
@itemize
@item See @ref{Installation} for how to set up a @code{conda} environment with @code{PDFmorph} installed.
@item If you need to list your available @code{conda} environments, run
@example
conda env list
@end example
@end itemize
@item Create a directory to store the tutorial PDF files using
@example
mkdir <PDFmorph_tutorial_directory>
@end example
and enter the directory with the @code{cd} command
@example
cd <PDFmorph_tutorial_directory>
@end example
@item Download the @url{https://www.diffpy.org/diffpy.pdfmorph/tutorialfiles.html,
quick start tutorial files @code{tutorialData.zip}}
into your current directory and extract the files. After this is done,
type @code{ls} in the command line to list your current directory contents
and make sure there is a directory named @code{tutorialData}.
@itemize
@item The files in this dataset were collected by Soham Banerjee at Brookhaven National Laboratory in Upton,
New York. Note that these files have a @code{.gr} extension, indicating that they are measured PDFs.
The @code{.cgr} file extension indicates a calculated PDF such as those generated by the
@url{https://www.diffpy.org/products/pdfgui.html, PDFgui} program.
@item Each file is PDF data collected on Iridium Telluride with 20% Rhodium Doping @math{IrRhTe_2} at different
temperatures with the first file (01) collected at @math{10K} and the last (44) at @math{300K}.
The samples increase in temperature as their numbers increase. The "C" in their names indicates that they
have undergone cooling.
@end itemize
@item Enter the @code{tutorialData} directory using the @code{cd} command and
find the data labeled @code{darkSub_rh20_C_##.gr} within this directory.
@float Figure,fig3.1-1
@ScreenShot{images/qs_tutorial_download,png}
@caption{Entering the @code{tutorialData} directory and searching
for the PDF data (Linux Terminal Output).}
@end float
@item Let us try try using the @code{PDFmorph} program to plot two PDFs against each other.
Type the following command into the command line
@example
pdfmorph darkSub_rh20_C_01.gr darkSub_rh20_C_44.gr
@end example
Underneath the two PDFs, we can see a substantial difference curve and large @math{R_W} value of @math{0.407}
@float Figure,fig3.1-2
@ScreenShot{images/qs_tutorial_unmorphed,png}
@caption{Using @code{PDFmorph} to compare two PDFs without morphing.}
@end float
@item Now, we will start the morphing process.
@itemize
@item Note that the morphs will apply only to the first PDF provided (which will be
@code{darkSub_rh20_C_01.gr} in our case). We will henceforth refer to the first PDF as the "morphed"
and the second (unmorphed) PDF as the "target". Our goal will be to apply morphs to see if we can reduce the
difference between the morphed and target PDFs.
@item In this tutorial, we will apply the scale factor, Gaussian smear, and stretch morphs.
To learn more about why we wish to apply these three morphs in particular,
see @ref{Temperature-related morphs}.
@end itemize
@item We will begin by applying a scaling factor of @math{2} by typing the command
@example
pdfmorph darkSub_rh20_C_01.gr darkSub_rh20_C_44.gr --scale=2 -a
@end example
Now, the difference is much larger @math{R_W=1.457}. We should modify our initial value
for the scaling factor until we see a reduction in @math{R_W}. We can try @math{0.9}
@example
pdfmorph darkSub_rh20_C_01.gr darkSub_rh20_C_44.gr --scale=0.9 -a
@end example
and see that the difference has dropped to @math{R_W=0.351}, lower than when comparing the unmorphed PDF.
For @code{PDFmorph} to optimize the scale factor, drop the @code{-a} option
@example
pdfmorph darkSub_rh20_C_01.gr darkSub_rh20_C_44.gr --scale=0.9
@end example
Given a reasonable initial guess, @code{PDFmorph} will find the optimal value for each morph.
In this example, @code{PDFmorph} should display @code{scale=0.799025} meaning it has found this
to be the optimal value for the scale factor. The difference @math{R_W=0.330} has further decreased.
@itemize
@item The @code{-a} option prevents @code{PDFmorph} from refining the morph.
It is the choice of the user whether or not to run values before removing @code{-a} when analyzing data with
@code{PDFmorph}. By including it, you can attempt to manually move towards convergence before allowing the
program to optimize by removing it; when including it, you may reach a highly optimized value on the first
guess or diverge greatly.
@end itemize
@float Figure,fig3.1-3
@ScreenShot{images/qs_tutorial_scaled,png}
@caption{@code{PDFmorph} has found an optimal value (minimizes @math{R_W}) for the scale factor.}
@end float
@item Now we will add on a Gaussian smear morph with an initial smear factor of @math{0.5}. The absolute value
of the  smear factor is the standard deviation of the Gaussian that is convoluted with the morphed PDF.
@example
pdfmorph darkSub_rh20_C_01.gr darkSub_rh20_C_44.gr --scale=0.8 \
--smear=0.5 -a
@end example
@itemize
@item The @code{\} in the above command is only used to break our long command into multiple lines for readability
on this document. In your Terminal/Command Prompt, you can write the entire command in a single line.
@end itemize
We have tailored our initial scale factor to be close to the optimal value given by @code{PDFmorph},
but we should see that the @math{R_W=0.897} has increased substantially due to the smear factor. Remove the
@math{-a} from above and run it again to refine the smear factor.
@itemize
@item Note that the warnings that the Terminal/Command Prompt displays are largely numerical in nature and
do not indicate a physically irrelevant guess. These are somewhat superficial and in most cases can be ignored.
@end itemize
After refining, we should see that @math{R_W} has dropped back to @math{0.330}, and the optimized smear factor is
quite small (@code{smear = 0.002940}) indicating that the smear has hardly had an effect on our PDF.
To see an effect, restrict the @code{rmin} and @code{rmax} values by typing
@example
pdfmorph darkSub_rh20_C_01.gr darkSub_rh20_C_44.gr --scale=0.8 \
--smear=0.5 --rmin=1.5 --rmax=30
@end example
The optimized smear factor is now a non-insignificant @code{smear=-0.084138} and @math{R_W=0.204}.
@itemize
@item We restricted the @math{r} (abscissa) values because some of the Gaussian smear effects are only
visible in a fixed @math{r} range. We chose this @math{r} range by noting where most of our relevant
data was that was not exponentially decayed by instrumental shortcomings.
@item Also note that a negative smear factor is equivalent to its absolute value. You can see that
@example
pdfmorph darkSub_rh20_C_01.gr darkSub_rh20_C_44.gr --scale=0.8 \
--smear=-0.84138 --rmin=1.5 --rmax=30 -a
@end example
and
@example
pdfmorph darkSub_rh20_C_01.gr darkSub_rh20_C_44.gr --scale=0.8 \
--smear=+0.84138 --rmin=1.5 --rmax=30 -a
@end example
give the exact same results.
@end itemize
@item Finally, we will examine the stretch morph. The @math{r} axis will be stretched by
@math{1+s} where @math{s} is the stretch factor.
@example
pdfmorph darkSub_rh20_C_01.gr darkSub_rh20_C_44.gr --scale=0.8 \
--smear=-0.84 --stretch=0.5 --rmin=1.5 --rmax=30 -a
@end example
Again, the @math{R_W} has increased. Before letting @code{PDFmorph} refine automatically,
try seeing which direction (higher or lower) the initial stretch factor should go to decrease
@math{R_W}. If you cannot, type
@example
pdfmorph darkSub_rh20_C_01.gr darkSub_rh20_C_44.gr --scale=0.8 \
--smear=-0.84 --stretch=0.005 --rmin=1.5 --rmax=30 -a
@end example
to observe a decreased difference and remove the @code{-a} to get the optimized
stretch factor of @code{stretch=0.001762} and smaller @math{R_W=0.117}.
We have reached the optimal fit for our PDF!
@float Figure,fig3.1-4
@ScreenShot{images/qs_tutorial_morphed,png}
@caption{The optimal fit after applying the scale, smear, and stretch morphs.}
@end float
@item Now, try it on your own!
If you have personally collected or otherwise readily available PDF data,
try this process to see if you can morph your PDFs to one another.
Note that many of the parameters provided in this tutorial are unique to it, so be
cautious about your choices and made sure that they remain physically relevant.
@end enumerate

@node    Extra tutorials, , Quick start tutorial, Tutorials
@section Extra tutorials
@cindex  extra tutorials

@menu
* Performing multiple morphs::
* Nanoparticle shape effect::
@end menu

PDFmorph has some more functionalities not showcased in the basic workflow above
(run @code{pdfmorph –-help} for an overview of all @code{PDFmorph} functionalities).
Tutorials for some of these are included below.
Additional files are used for these tutorials. Please download and extract
the @url{https://www.diffpy.org/diffpy.pdfmorph/tutorialfiles.html,
extra tutorial data @code{additionalData.zip}} before proceeding.

@node    Performing multiple morphs, Nanoparticle shape effect, Extra tutorials, Extra tutorials
@subsection Performing multiple morphs
@cindex  performing multiple morphs

It may be useful to morph a PDF against multiple targets: for example, you may want
to morph a PDF against a sequence of PDFs measured at various temepratures to determine
whether a phase change has occured. PDFmorph currently allows users to morph a PDF
against all files in a selected directory and plot resulting @math{R_W} values from each morph.
It is advised that the lowest temperature PDF be that morphed and the higher temperature PDFs
act as targets as the smear morph is only able to account for increases in thermal motion.

@enumerate
@item Within @code{additionalData}, enter (using @code{cd}) the @code{morphMultiple} directory.
Inside, you will find multiple PDFs of @math{SrFe_2As_2} measured at various temperatures.
@itemize
@item These PDFs come from @url{https://github.com/Billingegroup/pdfttp_data/,
@emph{Atomic Pair Distribution Function Analysis: A Primer}} by Simon Billinge and
Kirsten Jensen. Contributions to the dataset have been made by Benjamin Frandsen and
Long Yang.
@end itemize
@float Figure,fig3.2.1-1
@ScreenShot{images/ex_tutorial_download,png}
@caption{The files within the @code{morphMultiple} directory.}
@end float
@item Let us start by getting the @math{R_W} of @code{SrFe2As2_150K.gr}
compared to the other, higher-temperature PDFs in the directory. Run
@example
pdfmorph SrFe2As2_150K.gr . --multiple
@end example
@itemize
@item The @code{--multiple} tag tells @code{PDFmorph} to compare the morphed file
@code{SrFe2As2_150K.gr} against all PDFs in a directory. The directory we have
supplied is @code{.}, which is shorthand for the current working directory.
In our case, this is the @code{morphMultiple} directory.
@end itemize
@float Figure,fig3.2.1-2
@ScreenShot{images/ex_tutorial_bar,png}
@caption{Bar chart of @math{R_W} values for each target file. Target files are
listed in ASCII sort order.}
@end float
@item After running this we get a chart of @math{R_W} values for the morphed file
compared to each target file. By default, a bar chart is generated. However, this plot
can be difficult to interpret. We may instead wish to generate a line chart of @math{R_W}
values against some numerical abscissa such as temperature. At the top of each @code{.gr}
file in this directory is a list of parameters. These are of the form
@code{<parameter_name> = <parameter_value>} and are located above the @code{r} versus @code{gr}
table. Included in these parameters is the temperature at which each PDF was measured at.
@float Figure,fig3.2.1-3
@ScreenShot{images/ex_tutorial_params,png}
@caption{Parameters located at the top of the @code{SrFe2As2_150K.gr} file. Some parameters
included are temperature, wavelength, and composition.}
@end float
@item By running
@example
pdfmorph SrFe2As2_150K.gr . --multiple --sort-by=temperature
@end example
we can sort the plotted @math{R_W} values by the temperature parameter included within each file.
@itemize
@item When the value of the parameter given to @code{--sort-by} is numerical, a line plot is generated.
@item Otherwise, a bar chart with the parameter values sorted in ASCII sort order is generated.
You can observe this behavior by using @code{inputfile} as the @code{--sort-by} parameter
instead of @code{temperature}.
@end itemize
@float Figure,fig3.2.1-4
@ScreenShot{images/ex_tutorial_temp,png}
@caption{The @math{R_W} plotted against the temperature the target PDF was measured at.}
@end float
@item Between @math{192K} and @math{198K}, the @math{R_W} has a sharp change, which may be indicative of
a phase change. To be more certain, let us apply morphs to take into account isotropic expansion and differences
in incident flux (stretching and scaling).
@example
pdfmorph SrFe2As2_150K.gr . --scale=1 --stretch=0 --multiple \
--sort-by=temperature
@end example
The change in @math{R_W} has become more pronounced.
@itemize
@item Note that we are not applying the smear morph in this example as it takes a long time to refine and does
not significantly change the @math{R_W} values in this example.
@end itemize
@item We can also change what is being plotted in the ordinate using @code{--plot-parameter}. In our case,
it is useful to look at the @code{stretch} factor
@example
pdfmorph SrFe2As2_150K.gr . --scale=1 --stretch=0 --multiple \
--sort-by=temperature --plot-parameter=stretch
@end example
We can see that the stretch factor generally increases, but from @math{192K} to @math{198K}, there is no increase.
This means @code{PDFmorph} found that isotropic lattice expansion due to latent thermal effects (indicated
by an increase in the stretch factor) does not account for the change in @math{R_W} in this region. This is
highly suggestive of an alternative source of the dissimilarity such as a phase transition. In fact, there is a structural
phase transition from orthorhombic below @math{192K} to tetragonal above @math{198K}! More sophisticated analysis
can be done with @url{https://www.diffpy.org/products/pdfgui, PDFgui}.
@float Figure,fig3.2.1-5
@ScreenShot{images/ex_tutorial_stretch,png}
@caption{The refined stretch factor for each target PDF. There is very little change between @math{192K} and
@math{198K}.}
@end float
@end enumerate

@node    Nanoparticle shape effect, , Performing multiple morphs, Extra tutorials
@subsection Nanoparticle shape effect
@cindex  nanoparticle shape effect

@menu
* Spherical shape::
* Spheroidal shape::
@end menu

A nanoparticle’s finite size and shape can affect the shape of its PDF.
We can use PDFmorph to morph a bulk material PDF to simulate these shape effects.
Currently, the supported nanoparticle shapes include only spheres and spheroids.

@itemize
@item Within the @code{additionalData} directory, @code{cd} into the @code{morphShape}
subdirectory. Inside, you will find a sample Nickel bulk material PDF @code{Ni_bulk.gr}.
This PDF comes from @url{https://github.com/Billingegroup/pdfttp_data/,
@emph{Atomic Pair Distribution Function Analysis: A Primer}}.
Also in the directory are multiple @code{.cgr}, which are calculated Nickel nanoparticle
PDFs.
@float Figure,fig3.2.2-1
@ScreenShot{images/ex_tutorial_shape_download,png}
@caption{The files within the @code{morphShape} directory.}
@end float
@item In the following sections, we apply shape effect morphs on the bulk material to
reproduce the calculated PDFs.
@end itemize

Note that there are also support for morphing a nanoparticle PDF into bulk. For more information
see @ref{PDFmorph options}. When applying these inverse morphs it is recommended to set
@code{--rmax=psize} wher @code{psize} is the longest diameter of the nanoparticle as data
beyond @code{psize} is noise.

@node    Spherical shape, Spheroidal shape, Nanoparticle shape effect, Nanoparticle shape effect
@subsubsection Spherical shape
@cindex  spherical shape morph

@enumerate
@item The @code{Ni_nano_sphere.cgr} file contains a generated spherical nanoparticle with unknown
radius. First, let us plot @code{Ni_bulk.gr} against @code{Ni_nano_sphere.cgr}.
@example
pdfmorph Ni_bulk.gr Ni_nano_sphere.cgr
@end example
@item Despite the two being the same material, the @math{R_W} is quite large.
To reduce the Rw, we will apply spherical shape effects onto the PDF.
However, in order to do so, we first need the radius of the spherical nanoparticle.
@item A nanoparticle cannot have bonds longer than the particle size. Thus, for @math{r}
beyond the spherical diameter, we expect the PDF amplitude to be close to zero.
On our plot, the nanoparticle PDF amplitude falls to zero around @math{r=22}.
Thus, the nanoparticle radius should be about half of that, or around @math{11}.
@float Figure,fig3.2.2.1-1
@ScreenShot{images/ex_tutorial_shape_sphere_zoomed,png}
@caption{The PDF amplitude goes to zero between @math{r=21} and @math{r=22}.}
@end float
@item We are ready to perform a morph applying spherical shape effects.
To do so, we use the @code{--radius} parameter
@example
pdfmorph Ni_bulk.gr Ni_nano_sphere.cgr --radius=11 -a
@end example
We can see that the @math{R_W} value has decreased significantly from
@math{R_W = 1.422} to @math{R_W = 0.085232}.
@item Finally, let us refine by running the same command without the @code{-a} tag.
The refined radius should be @code{radius=12.183129}.
@end enumerate

@node    Spheroidal shape, , Spherical shape, Nanoparticle shape effect
@subsubsection Spheroidal shape
@cindex  spheroidal shape morph

@enumerate
@item The @code{Ni_nano_spheroid.cgr} file contains a calculated spheroidal Niickel nanoparticle.
Again, we can begin by plotting the bulk material against our nanoparticle.
@example
pdfmorph Ni_bulk.gr Ni_nano_spheroid.cgr
@end example
@item The nanoparticle shape of the calculated PDF is an oblate spheroid with equitorial
radius of about @math{12} and polar radius of about @math{6} (this information is contained
within the @code{Ni_nano_spheroid.cgr} file). To apply the spheroidal shape effects onto the
bulk, run
@example
pdfmorph Ni_bulk.gr Ni_nano_spheroid.cgr --radius=12 --pradius=6 -a
@end example
@itemize
@item The @code{--radius} option corresponds to the equitorial radius.
@item The @code{--pradius} option corresponds to the polar radius.
@end itemize
@item Run the same command without @code{-a} to refine. Refining should give
@code{radius=12.183129} and @code{pradius=6.279252}.
@end enumerate

@page
@vskip 0pt plus 1filll
@node    Available morphs, PDFmorph options, Quick start tutorial, Top
@chapter Available morphs
@cindex  available morphs

@menu
* Temperature-related morphs::
* Shape-related morphs::
@end menu

In this section, we detail a few use-cases for morphs.

@node    Temperature-related morphs, Shape-related morphs, Available morphs, Available morphs
@section Temperature-related morphs
@cindex  temperature-related morphs

@node    Shape-related morphs, , Temperature-related morphs, Available morphs
@section Shape-related morphs
@cindex  shape-related morphs

@page
@vskip 0pt plus 1filll
@node    PDFmorph options, Index, Available morphs, Top
@chapter PDFmorph options
@cindex  pdfmorph options

Explaination of options

@c End TexInfo file
@node Index, Top
@unnumbered Index

@printindex cp

@bye
